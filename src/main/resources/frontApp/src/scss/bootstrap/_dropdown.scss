// The dropdown wrapper (`<div>`)
.dropup,
.dropend,
.dropdown,
.dropstart {
  position: relative;
}

.dropdown-toggle {
  white-space: nowrap;
  display: none !important;

  @media (min-width: map-get($grid-breakpoints, 'xl')) {
    display: block !important;
  }

  &:after {
    vertical-align: middle !important;
    transition: $transition-base, transform .15s ease-in-out;
  }

  // Generate the caret automatically
  @include caret();
}

.dropdown {
  &.show {
    .dropdown-toggle {
      color: $primary;

      &:hover,
      &:after {
        color:$primary;
      }

      &:after {
        transform: rotate(-180deg);
        transition: $transition-base;
      }
    }
  }
}

// The dropdown menu
.dropdown-menu {
  min-width: $dropdown-min-width;
  position: relative;
  text-align: left; // Ensures proper alignment if parent has it changed (e.g., modal footer)
  list-style: none;
  @include font-size($dropdown-font-size);
  background-color: $dropdown-bg;
  background-clip: padding-box;
  z-index: $zindex-dropdown;
  transition: opacity .3s ease-in-out;

  @media (min-width: map-get($grid-breakpoints, 'xl')) {
    display: none; // none by default, but block on "open" of the menu
    position: absolute;
    padding: 0;
    margin: -2px 0 0; // Override default margin of ul
    border: $border-width $border-style $border-color;
    top: 100%;
    left: -2px;
    color: $primary;
    opacity: 0;
  }

  &[data-bs-popper] {
    margin-top: $dropdown-spacer;
  }
}

// scss-docs-start responsive-breakpoints
// We deliberately hardcode the `bs-` prefix because we check
// this custom property in JS to determine Popper's positioning

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .dropdown-menu#{$infix}-start {
      --bs-position: start;

      &[data-bs-popper] {
        right: auto #{"/* rtl:ignore */"};
        left: 0 #{"/* rtl:ignore */"};
      }
    }

    .dropdown-menu#{$infix}-end {
      --bs-position: end;

      &[data-bs-popper] {
        right: 0 #{"/* rtl:ignore */"};
        left: auto #{"/* rtl:ignore */"};
      }
    }
  }
}
// scss-docs-end responsive-breakpoints

// Allow for dropdowns to go bottom up (aka, dropup-menu)
// Just add .dropup after the standard .dropdown class and you're set.
.dropup {
  .dropdown-menu {
    top: auto;
    bottom: 100%;

    &[data-bs-popper] {
      margin-top: 0;
      margin-bottom: $dropdown-spacer;
    }
  }

  .dropdown-toggle {
    @include caret(up);
  }
}

.dropend {
  .dropdown-menu {
    top: 0;
    right: auto;
    left: 100%;

    &[data-bs-popper] {
      margin-top: 0;
      margin-left: $dropdown-spacer;
    }
  }

  .dropdown-toggle {
    @include caret(end);
    &::after {
      vertical-align: 0;
    }
  }
}

.dropstart {
  .dropdown-menu {
    top: 0;
    right: 100%;
    left: auto;

    &[data-bs-popper] {
      margin-top: 0;
      margin-right: $dropdown-spacer;
    }
  }

  .dropdown-toggle {
    @include caret(start);
    &::before {
      vertical-align: 0;
    }
  }
}


// Dividers (basically an `<hr>`) within the dropdown
.dropdown-divider {
  height: 0;
  margin: 0;
  overflow: hidden;
  border: none;

  @media (min-width: map-get($grid-breakpoints, 'xl')) {
    border-top: 1px solid var(--bs-primary);
  }
}

// Links, buttons, and more within the dropdown menu
//
// `<button>`-specific styles are denoted with `// For <button>s`
.dropdown-item {
  padding-right: 0 !important;
  padding-left: 0 !important;

  @media (min-width: map-get($grid-breakpoints, 'xl')) {
    width: 100%; // For `<button>`s
    display: block;
    padding: $dropdown-item-padding-y $dropdown-item-padding-x !important;
    border: 0; // For `<button>`s
    font-weight: $font-weight-normal;
    color: $dropdown-link-color !important;
    text-align: inherit; // For `<button>`s
    white-space: nowrap; // prevent links from randomly breaking onto new lines
    background-color: transparent; // For `<button>`s
    clear: both;
    transition: $transition-base;

    &:hover,
    &:focus,
    &.active,
    &:active {
      color: $dropdown-link-active-color !important;
      text-decoration: none;
      background-color: $dropdown-link-active-bg;
    }

    &.disabled,
    &:disabled {
      pointer-events: none;
      background-color: transparent;
    }

    &:before {
      content: unset !important;
    }
  }
}

.dropdown-menu.show {
  display: block;
}

// Dropdown section headers
.dropdown-header {
  display: block;
  padding: $dropdown-header-padding;
  margin-bottom: 0; // for use with heading elements
  @include font-size($font-size-sm);
  white-space: nowrap; // as with > li > a
}

// Dropdown text
.dropdown-item-text {
  display: block;
  padding: $dropdown-item-padding-y $dropdown-item-padding-x;
  color: $dropdown-link-color;
}

// Dark dropdowns
.dropdown-menu-dark {
  color: $dropdown-dark-color;
  background-color: $dropdown-dark-bg;
  border-color: $dropdown-dark-border-color;

  .dropdown-item {
    color: $dropdown-dark-link-color;

    &:hover,
    &:focus {
      color: $dropdown-dark-link-hover-color;
      @include gradient-bg($dropdown-dark-link-hover-bg);
    }

    &.active,
    &:active {
      color: $dropdown-dark-link-active-color;
      @include gradient-bg($dropdown-dark-link-active-bg);
    }

    &.disabled,
    &:disabled {
    }
  }

  .dropdown-divider {
    border-color: $dropdown-dark-divider-bg;
  }

  .dropdown-item-text {
    color: $dropdown-dark-link-color;
  }

  .dropdown-header {
    color: $dropdown-dark-header-color;
  }
}
